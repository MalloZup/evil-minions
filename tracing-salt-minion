#!/usr/bin/env python
'''
This script is used to kick off a salt minion daemon
'''

import yaml
import time

import tornado.gen

from salt.scripts import salt_minion

from salt.transport.zeromq import AsyncZeroMQReqChannel
from salt.transport.zeromq import AsyncZeroMQPubChannel

class Dumper(object):
    def __init__(self):
        self.dump_file = open('/tmp/minion-trace.yml', 'w+')

    def dump(self, load, socket):
        header = {
            'socket' : socket,
            'time' : time.time(),
        }
        event = {
            'header' : header,
            'load' : load,
        }
        self.dump_file.write("---\n")
        self.dump_file.write(yaml.safe_dump(event, default_flow_style=False))
        self.dump_file.flush()

# init dumper

d = Dumper()

# define send/receive methods that dump in addition to their original functionality

@tornado.gen.coroutine
def logging_send(self, load, **kwargs):
    d.dump(load, 'REQ')
    ret = yield self.send_original(load, **kwargs)
    d.dump(ret, 'REP')
    raise tornado.gen.Return(ret)

def logging_on_recv(self, callback):
    def logging_callback(load):
        d.dump(load, 'PUB')
        callback(load)
    return self.on_recv_original(logging_callback)

# monkey patch

AsyncZeroMQReqChannel.send_original = AsyncZeroMQReqChannel.send
AsyncZeroMQReqChannel.send = logging_send

AsyncZeroMQPubChannel.on_recv_original = AsyncZeroMQPubChannel.on_recv
AsyncZeroMQPubChannel.on_recv = logging_on_recv

# start minion

salt_minion()
